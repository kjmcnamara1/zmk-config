/*
* Copyright (c) 2020 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/mouse.h>

#define HYPER LC(LS(LG(LALT)))

// layers
#define QWERTY 0
#define ENGRAM 1
#define NUMBER 2
#define SHNUMBER 3
#define FUNCTION 4
#define SYMBOL 5
#define WORLD 6
#define LOWER 7
#define MAGIC 8

// HRM parameters
#define HOLD_TYPE "tap-preferred" // flavor of hold-tap. `tap-preferred` means modifier will only be triggered if held for `HOLD_TIME` or longer. Pressing another key before this triggers 'tap' behavior. Except for keys in `hold-trigger-key-positions`
#define HOLD_TIME 200 // how long you need to hold key in order to send their modifiers to the computer
#define STREAK_DECAY 150 // how long you need to wait after typing before you can use home row mods again.
#define REPEAT_DECAY 300 // how much time you have left after tapping a key to hold it again in order to make it auto-repeat.
#define SELECT_WORD_DELAY 1 // wait-ms and tap-ms for select word macros

//
// Glove80 key positions index for positional hold-tap
// - https://discord.com/channels/877392805654306816/937645688244826154/1066713913351221248
// - https://media.discordapp.net/attachments/937645688244826154/1066713913133121556/image.png
//
// |------------------------|------------------------|
// | LEFT_HAND_KEYS         |        RIGHT_HAND_KEYS |
// |                        |                        |
// |  0  1  2  3  4         |          5  6  7  8  9 |
// | 10 11 12 13 14 15      |      16 17 18 19 20 21 |
// | 22 23 24 25 26 27      |      28 29 30 31 32 33 |
// | 34 35 36 37 38 39      |      40 41 42 43 44 45 |
// | 46 47 48 49 50 51      |      58 59 60 61 62 63 |
// | 64 65 66 67 68         |         75 76 77 78 79 |
// |                69 52   |   57 74                |
// |                 70 53  |  56 73                 |
// |                  71 54 | 55 72                  |
// |------------------------|------------------------|
//
#define LEFT_HAND_KEYS      \
      0  1  2  3  4         \
     10 11 12 13 14 15      \
     22 23 24 25 26 27      \
     34 35 36 37 38 39      \
     46 47 48 49 50 51      \
     64 65 66 67 68
#define RIGHT_HAND_KEYS     \
                                       5  6  7  8  9 \
                                   16 17 18 19 20 21 \
                                   28 29 30 31 32 33 \
                                   40 41 42 43 44 45 \
                                   58 59 60 61 62 63 \
                                     75 76 77 78 79
#define THUMB_KEYS          \
                    69 52       57 74                \
                     70 53     56 73                 \
                      71 54   55 72

/ {
  macros {
    rgb_ug_status_macro: rgb_ug_status_macro {
      label = "RGB_UG_STATUS";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
        = <&rgb_ug RGB_STATUS>;
    };

    bt_0: bt_profile_macro_0 {
      label = "BT_0";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
        = <&out OUT_BLE>,
        <&bt BT_SEL 0>;
    };

    bt_1: bt_profile_macro_1 {
      label = "BT_1";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
        = <&out OUT_BLE>,
        <&bt BT_SEL 1>;
    };

    bt_2: bt_profile_macro_2 {
      label = "BT_2";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
        = <&out OUT_BLE>,
        <&bt BT_SEL 2>;
    };

    bt_3: bt_profile_macro_3 {
      label = "BT_3";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
        = <&out OUT_BLE>,
        <&bt BT_SEL 3>;
    };

    select_word_right: select_word_right {
            label = "&SELECT_WORD_RIGHT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings
                = <&kp LC(LEFT)>
                , <&kp LC(RIGHT)>
                , <&kp LC(LS(RIGHT))>;
        };

    select_word_left: select_word_left {
            label = "&SELECT_WORD_LEFT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings
                = <&kp LC(RIGHT)>
                , <&kp LC(LEFT)>
                , <&kp LC(LS(LEFT))>;
        };

    select_line_down: select_line_down {
            label = "&SELECT_LINE_DOWN";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <10>;
            wait-ms = <10>;
            bindings
                = <&kp DOWN>
                , <&kp HOME>
                , <&kp LS(END)>;
        };

    select_line_up: select_line_up {
            label = "&SELECT_LINE_UP";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <10>;
            wait-ms = <10>;
            bindings
                = <&kp UP>
                , <&kp END>
                , <&kp LS(HOME)>;
        };

    extend_line_up: extend_line_up {
            label = "&EXTEND_LINE_UP";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings
                = <&kp LS(UP)>
                , <&kp LS(HOME)>;
        };

    extend_line_down: extend_line_down {
            label = "&EXTEND_LINE_DOWN";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings
                = <&kp LS(DOWN)>
                , <&kp LS(END)>;
        };

    extend_word_right: extend_word_right {
            label = "&EXTEND_WORD_RIGHT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings
                = <&kp LC(LS(RIGHT))>;
        };

    extend_word_left: extend_word_left {
            label = "&EXTEND_WORD_LEFT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings
                = <&kp LC(LS(LEFT))>;
        };
  };

  behaviors {
    // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
    // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
    lower: lower_tap_dance {
      compatible = "zmk,behavior-tap-dance";
      label = "LOWER_TAP_DANCE";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&mo LOWER>, <&to LOWER>;
    };

    magic: magic {
      compatible = "zmk,behavior-hold-tap";
      label = "MAGIC_HOLD_TAP";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <200>;
      bindings = <&mo>, <&rgb_ug_status_macro>;
    };

    // Mod Morphs

    word_right: word_right {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&select_word_right>, <&extend_word_right>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    word_left: word_left {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&select_word_left>, <&extend_word_left>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    line_down: line_down {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&select_line_down>, <&extend_line_down>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    line_up: line_up {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&select_line_up>, <&extend_line_up>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    lparlt: shift_LPAR_LT {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp LPAR>, <&kp LT>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    rpargt: shift_RPAR_GT {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp RPAR>, <&kp GT>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    dotcolon: shift_DOT_COLON {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp DOT>, <&kp COLON>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    commasemi: shift_COMMA_SEMI {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp COMMA>, <&kp SEMI>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    qmarkexcl: shift_QMARK_EXCL {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp QMARK>, <&kp EXCL>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    slash: shift_FSLH_BSLH {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp FSLH>, <&kp BSLH>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    plusminus: shift_PLUS_MINUS {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp PLUS>, <&kp MINUS>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    starfslh: shift_STAR_FSLH {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp STAR>, <&kp FSLH>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    caretat: shift_CARET_AT {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp CARET>, <&kp AT>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    logic: shift_PIPE_AMPS {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp PIPE>, <&kp AMPS>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    prcntequal: shift_PRCNT_EQUAL {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp PRCNT>, <&kp EQUAL>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    commaunder: shift_COMMA_UNDER {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp COMMA>, <&kp UNDER>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    dllrhash: shift_DLLR_HASH {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp DLLR>, <&kp HASH>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    equal: shift_EQUAL_TILDE {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp EQUAL>, <&kp TILDE>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    lmt: left_mod_tap {
      compatible = "zmk,behavior-hold-tap";
      flavor = HOLD_TYPE;
      tapping-term-ms = <HOLD_TIME>;
      quick-tap-ms = <REPEAT_DECAY>;
      require-prior-idle-ms = <STREAK_DECAY>;
      hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
      hold-trigger-on-release; // wait for other home row mods
      #binding-cells = <2>;
      bindings = <&kp>, <&kp>;
    };

    rmt: right_mod_tap {
      compatible = "zmk,behavior-hold-tap";
      flavor = HOLD_TYPE;
      tapping-term-ms = <HOLD_TIME>;
      quick-tap-ms = <REPEAT_DECAY>;
      require-prior-idle-ms = <STREAK_DECAY>;
      hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
      hold-trigger-on-release; // wait for other home row mods
      #binding-cells = <2>;
      bindings = <&kp>, <&kp>;
    };

    tlt: thumb_layer_tap {
      compatible = "zmk,behavior-hold-tap";
      flavor = HOLD_TYPE;
      tapping-term-ms = <HOLD_TIME>;
      quick-tap-ms = <REPEAT_DECAY>;
      #binding-cells = <2>;
      bindings = <&mo>, <&kp>;
    };

    rtsh: right_thumb_shift {
      compatible = "zmk,behavior-hold-tap";
      flavor = HOLD_TYPE;
      tapping-term-ms = <HOLD_TIME>;
      quick-tap-ms = <REPEAT_DECAY>;
      require-prior-idle-ms = <STREAK_DECAY>;
      hold-trigger-key-positions = <LEFT_HAND_KEYS RIGHT_HAND_KEYS>;
      hold-trigger-on-release; // wait for other home row mods
      #binding-cells = <2>;
      bindings = <&kp>, <&kp>;
    };

    ltsh: left_thumb_shift {
      compatible = "zmk,behavior-hold-tap";
      flavor = HOLD_TYPE;
      tapping-term-ms = <HOLD_TIME>;
      quick-tap-ms = <REPEAT_DECAY>;
      require-prior-idle-ms = <STREAK_DECAY>;
      hold-trigger-key-positions = <LEFT_HAND_KEYS RIGHT_HAND_KEYS>;
      hold-trigger-on-release; // wait for other home row mods
      #binding-cells = <2>;
      bindings = <&kp>, <&caps_word>;
    };

  };

  combos {
    compatible = "zmk,combos";

    combo_esc {
      bindings = <&kp ESC>;
      key-positions = <41 42>;
      layers = <ENGRAM QWERTY>;
    };


    combo_enter {
      bindings = <&kp ENTER>;
      key-positions = <38 37>;
      layers = <ENGRAM QWERTY >;
    };

    combo_mb1 {
      bindings = <&mkp MB1>;
      key-positions = <41 42>;
      layers = <SYMBOL>;
    };

    combo_mb2 {
      bindings = <&mkp MB2>;
      key-positions = <43 44>;
      layers = <SYMBOL>;
    };

    combo_mb3 {
      bindings = <&mkp MB3>;
      key-positions = <43 44 42 41>;
      layers = <SYMBOL>;
    };

  };

  keymap {
    compatible = "zmk,keymap";

    layer_Qwerty {
      bindings = <
        &kp N0       &kp N1       &kp N2        &kp N3        &kp N4                                                                                                                                                         &kp N5        &kp N6       &kp N7         &kp N8   &kp N9
        &kp F1       &kp F2       &kp F3        &kp F4        &kp F5  &kp F6                                                                                                                                   &kp F7        &kp F8        &kp F9      &kp F10        &kp F11  &kp F12
        &equal        &kp Q        &kp W         &kp E         &kp R   &kp T                                                                                                                                    &kp Y         &kp U         &kp I        &kp O          &kp P   &logic
        &kp ESC  &lmt LGUI A  &lmt LALT S  &lmt LCTRL D  &lmt LSHFT F   &kp G                                                                                                                                    &kp H  &rmt LSHFT J  &rmt LCTRL K  &rmt LALT L  &rmt LGUI SQT  &kp RET
        &kp MINUS        &kp Z        &kp X         &kp C         &kp V   &kp B              &kp LCTRL                 &kp LALT       &kp LGUI          &kp RGUI               &kp RALT                &kp RCTRL   &kp N         &kp M    &commasemi    &dotcolon     &slash   &qmarkexcl
        &magic MAGIC 0      &lparlt     &kp LBKT      &kp RBKT       &rpargt          &tlt NUMBER TAB  &tlt FUNCTION DEL  &ltsh LSHFT 0  &rtsh RSHFT CAPS  &tlt WORLD BSPC  &tlt SYMBOL SPACE              &kp LEFT      &kp DOWN       &kp UP      &kp RIGHT   &lower
      >;
    };

    layer_Engram {
      bindings = <
        &kp N0       &kp N1       &kp N2        &kp N3        &kp N4                                                                               &kp N5        &kp N6       &kp N7       &kp N8   &kp N9
        &kp F1       &kp F2       &kp F3        &kp F4        &kp F5      &kp F6                                                     &kp F7        &kp F8        &kp F9      &kp F10      &kp F11  &kp F12
        &kp Q        &kp B        &kp Y         &kp O         &kp U  &qmarkexcl                                                    &kp SQT         &kp L         &kp D        &kp W        &kp V   &logic
        &kp ESC  &lmt LGUI C  &lmt LALT I  &lmt LCTRL E  &lmt LSHFT A  &commasemi                                                  &dotcolon  &rmt LSHFT H  &rmt LCTRL T  &rmt LALT S  &rmt LGUI N  &kp RET
        &kp Z        &kp G        &kp X         &kp J         &kp K      &slash  &trans  &trans  &trans  &trans  &trans  &trans  &kp MINUS         &kp R         &kp M        &kp F        &kp P   &equal
        &magic MAGIC 0       &trans       &trans        &trans        &trans              &trans  &trans  &trans  &trans  &trans  &trans                   &trans        &trans       &trans       &trans   &lower
      >;
    };

    layer_Number {
      bindings = <
             &none      &none      &none      &none        &none                                                                                    &none   &none   &none      &none              &none
             &none      &none      &none      &none        &none             &none                                                      &kp CARET   &kp J   &kp K   &kp G   &kp PIPE              &none
             &none  &kp LC(Q)  &kp LC(W)  &kp LC(Y)    &kp LC(Z)         &kp LC(X)                                                       &kp STAR  &kp N7  &kp N8  &kp N9  &kp PRCNT              &none
           &kp ESC  &kp LC(A)  &kp LC(S)   &kp BSPC  &lt SHNUMBER SPACE  &kp LC(C)                                                        &kp DOT  &kp N4  &kp N5  &kp N6  &kp COMMA            &kp RET
             &none      &none      &none    &kp DEL      &kp TAB         &kp LC(V)   &none   &none   &none  &kp LBRC  &kp RBRC   &none   &kp PLUS  &kp N1  &kp N2  &kp N3   &kp DLLR              &none
       &tog NUMBER     &trans     &trans     &trans       &trans                     &none   &none   &none    &kp LT    &kp GT  &kp N0             &trans  &trans  &trans     &trans        &tog NUMBER
            >;
    };

    layer_ShNumber {
      bindings = <
        &none   &none   &none   &none   &none                                                                         &none      &none      &none      &none   &none
        &none   &none   &none   &none   &none   &none                                                     &kp AT      &none      &none      &none   &kp AMPS   &none
        &none   &none   &none   &none   &none   &none                                                   &kp FSLH      &none      &none      &none  &kp EQUAL   &none
        &none   &none   &none   &none   &none   &none                                                  &kp COLON  &kp LS(A)  &kp LS(B)  &kp LS(C)  &kp UNDER   &none
        &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none  &kp MINUS  &kp LS(D)  &kp LS(E)  &kp LS(F)   &kp HASH   &none
        &none   &none   &none   &none   &none           &none   &none   &none   &none   &none   &kp X                 &none      &none      &none      &none   &none
      >;
    };

    layer_Function {
      bindings = <
        &none     &none     &none      &none      &none                                                                                             &none        &none       &none            &none                &none
        &none     &none     &none      &none      &none   &none                                                                      &kp C_RW  &kp C_PREV  &kp C_PAUSE  &kp C_PLAY       &kp C_NEXT             &kp C_FF
        &none     &none     &none      &none      &none   &none                                                                         &none      &kp F7       &kp F8      &kp F9          &kp F10              &kp F13
        &trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT   &none                                                                         &none      &kp F4       &kp F5      &kp F6          &kp F11              &kp F14
        &none     &none     &none      &none      &none   &none   &none   &none   &none  &kp C_BRI_AUTO  &kp C_BRI_DN  &kp C_BRI_UP     &none      &kp F1       &kp F2      &kp F3          &kp F12              &kp F15
        &tog FUNCTION     &none     &none      &none      &none           &none   &none   &none      &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP               &kp INS    &kp PSCRN    &kp SLCK  &kp PAUSE_BREAK  &tog FUNCTION
      >;
    };

    layer_Symbol {
      bindings = <
        &none            &none           &none            &none            &none                                                                                           &none          &none            &none            &none              &none
        &none            &none           &none            &none            &none     &none                                                                &none            &none          &none            &none            &none              &none
        &kp AMPS           &kp AT       &kp TILDE         &kp PLUS        &kp PRCNT  &kp PIPE                                                           &word_left       &line_down       &line_up      &word_right          &kp DQT              &none
        &kp HASH  &lmt LGUI CARET  &lmt LALT LBRC  &lmt LCTRL RBRC  &lmt LSHFT DLLR  &kp STAR                                                             &kp LEFT  &rmt LSHFT DOWN  &rmt LCTRL UP  &rmt LALT RIGHT  &rmt LGUI GRAVE           &kp EXCL
        &kp BSLH           &kp LT       &kp EQUAL        &kp MINUS           &kp GT  &kp FSLH  &kp QMARK    &kp DOT  &kp COMMA   &none   &none   &none    &kp HOME        &kp PG_DN      &kp PG_UP          &kp END          &kp SQT              &none
        &tog SYMBOL          &lparlt        &kp LBKT         &kp RBKT          &rpargt            &kp UNDER  &kp COLON   &kp SEMI   &none   &none   &none                    &kp SPACE        &kp RET          &kp TAB         &kp BSPC  &tog SYMBOL
      >;
    };

    layer_World {
      bindings = <
        &none   &none   &none   &none   &none                                                                   &none   &none   &none   &none             &none
        &none   &none   &none   &none   &none   &none                                                   &none   &none   &none   &none   &none             &none
        &none   &none   &none   &none   &none   &none                                                   &none   &none   &none   &none   &none             &none
        &none   &none   &none   &none   &none   &none                                                   &none   &none   &none   &none   &none             &none
        &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none             &none
        &tog WORLD   &none   &none   &none   &none           &none   &none   &none   &none   &none   &none           &none   &none   &none   &none  &tog WORLD
      >;
    };

    layer_Lower {
      bindings = <
        &kp C_BRI_DN  &kp C_BRI_UP      &kp C_PREV      &kp C_NEXT         &kp C_PP                                                                                                                                 &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP            &none   &kp PAUSE_BREAK
        &trans         &none           &none           &none            &none   &kp HOME                                                                                                &kp LEFT_PARENTHESIS  &kp KP_NUM  &kp KP_EQUAL  &kp KP_SLASH  &kp KP_MULTIPLY   &kp PRINTSCREEN
        &trans         &none           &none    &kp UP_ARROW            &none    &kp END                                                                                               &kp RIGHT_PARENTHESIS   &kp KP_N7     &kp KP_N8     &kp KP_N9     &kp KP_MINUS    &kp SCROLLLOCK
        &trans         &none  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PG_UP                                                                                                         &kp PERCENT   &kp KP_N4     &kp KP_N5     &kp KP_N6      &kp KP_PLUS             &none
        &trans     &kp K_APP           &none         &kp F11          &kp F12  &kp PG_DN             &trans               &trans  &trans  &trans            &trans             &trans              &kp COMMA   &kp KP_N1     &kp KP_N2     &kp KP_N3     &kp KP_ENTER            &trans
        &tog LOWER      &kp CAPS         &kp INS         &kp F11          &kp F12             &tog NUMBER  &tog FUNCTION  &trans  &trans  &tog WORLD  &tog SYMBOL                          &kp KP_N0     &kp KP_N0    &kp KP_DOT     &kp KP_ENTER  &tog LOWER
      >;
    };

    layer_Magic {
      bindings = <
        &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
        &to 0            &to 1            &to 2            &to 3            &to 4            &to 5                                                         &to 6   &to 7   &none   &none   &none           &none
        &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
        &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
        &sys_reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none      &sys_reset
        &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
      >;
    };

  };
};
